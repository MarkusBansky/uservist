/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.markiian.benovskyi.api;

import com.markiian.benovskyi.model.GeneralError;
import com.markiian.benovskyi.model.Service;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-02-11T20:00:52.596177Z[Europe/London]")

@Validated
@Api(value = "services", description = "the services API")
public interface ServicesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Get all services.", nickname = "servicesGetAll", notes = "Returns all available services in the system. Only returns the keys fields if user is authenticated via token.", response = Service.class, responseContainer = "List", tags={ "Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfull request, returning all available services in the system.", response = Service.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Missing or expired session.", response = GeneralError.class),
        @ApiResponse(code = 403, message = "Missing required privileges.", response = GeneralError.class) })
    @RequestMapping(value = "/services",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Service>> servicesGetAll() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",  \"name\" : \"name\",  \"description\" : \"description\",  \"id\" : 0,  \"key\" : \"key\",  \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "Get service by ID.", nickname = "servicesGetById", notes = "Returns a service information by it's ID if this service exists, returns key property if user is admin.", response = Service.class, tags={ "Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfull request, return the service object.", response = Service.class),
        @ApiResponse(code = 401, message = "Missing or expired session.", response = GeneralError.class),
        @ApiResponse(code = 403, message = "Missing required privileges.", response = GeneralError.class),
        @ApiResponse(code = 404, message = "Such service does not exist.", response = GeneralError.class) })
    @RequestMapping(value = "/services/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Service> servicesGetById(@ApiParam(value = "The unique identifier of service to search for.",required=true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",  \"name\" : \"name\",  \"description\" : \"description\",  \"id\" : 0,  \"key\" : \"key\",  \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
