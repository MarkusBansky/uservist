/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.markiian.benovskyi.api;

import com.markiian.benovskyi.model.GeneralError;
import com.markiian.benovskyi.model.User;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-02-11T20:00:52.596177Z[Europe/London]")

@Validated
@Api(value = "users", description = "the users API")
public interface UsersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "Create new user.", nickname = "usersCreate", notes = "Creates a new user if can and if the creator token has a valid admin role on the service.", response = User.class, tags={ "Users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully created a new user account.", response = User.class),
        @ApiResponse(code = 401, message = "Missing or expired session.", response = GeneralError.class),
        @ApiResponse(code = 403, message = "Missing required privileges.", response = GeneralError.class),
        @ApiResponse(code = 404, message = "Such service does not exist.", response = GeneralError.class) })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<User> usersCreate(@ApiParam(value = ""  )  @Valid @RequestBody User user) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"firstName\" : \"firstName\",  \"lastName\" : \"lastName\",  \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",  \"roles\" : [ {    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",    \"role\" : \"USER\",    \"service\" : {      \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",      \"name\" : \"name\",      \"description\" : \"description\",      \"id\" : 0,      \"key\" : \"key\",      \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"id\" : 6  }, {    \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",    \"role\" : \"USER\",    \"service\" : {      \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\",      \"name\" : \"name\",      \"description\" : \"description\",      \"id\" : 0,      \"key\" : \"key\",      \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"    },    \"id\" : 6  } ],  \"id\" : 0,  \"passwordHash\" : \"passwordHash\",  \"username\" : \"username\",  \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
