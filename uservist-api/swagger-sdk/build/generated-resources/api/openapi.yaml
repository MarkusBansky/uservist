openapi: 3.0.0
info:
  contact:
    email: admin@markiian-benovskyi.com
    name: Markiian Benovskyi
    url: https://www.markiian-benovskyi.com
  description: Defines the API enpoints and objects for authentication service. Describes
    the REST service architecture and models.
  title: Uservist Service API
  version: 0.0.1
servers:
- description: Local server for authentication service.
  url: http://localhost:9090/api/
tags:
- description: Service represents a single connected SaaS that uses this authentication
    to autorize users, it has a unique key and uses user token for authentication.
  name: Services
- description: Each user can have access to specific services with a specific role,
    then it can authenticate and receive a token.
  name: Users
- description: Authenticate user with username and password, and the unique identifier
    of the system. Or validate user token and return user information for that specific
    service.
  name: Authentication
- description: Invitation controller to handle joiining service invitations.
  name: Invitations
paths:
  /invitations:
    get:
      description: User accepts the invitation and acquires role and connection for
        the specific service.
      operationId: acceptInvitation
      parameters:
      - description: Invitation token.
        explode: true
        in: query
        name: token
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          description: Successfully aquired service role.
        "401":
          description: Missing or expired session.
        "403":
          description: Missing required privileges.
      summary: Accept invitation.
      tags:
      - Invitations
      x-accepts: application/json
    post:
      description: Create an invitation for some user to be added to the service,
        user would receive a specific role when they approve the invitation. Invitation
        is sent by email.
      operationId: createInvitation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserServiceInvitationDto'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserServiceInvitationLinkDto'
          description: Successfull invitation sent.
        "401":
          description: Missing or expired session.
        "403":
          description: Missing required privileges.
      summary: Create invitation.
      tags:
      - Invitations
      x-contentType: application/json
      x-accepts: application/json
  /services:
    get:
      description: Returns all available services in the system. Only returns the
        keys fields if user is authenticated via token.
      operationId: servicesGetAll
      parameters:
      - description: Page of users, 10 users per page.
        explode: true
        in: query
        name: page
        required: true
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ServiceDto'
                type: array
          description: Successfull request, returning all available services in the
            system.
        "401":
          description: Missing or expired session.
        "403":
          description: Missing required privileges.
      summary: Get all services.
      tags:
      - Services
      x-accepts: application/json
    post:
      description: Creates a new service record in the database. If user does not
        have a permission to create a record, then trow an error.
      operationId: servicesCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceDto'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceDto'
          description: Successfully created new service record.
        "401":
          description: Missing or expired session.
        "403":
          description: Missing required privileges.
      summary: Create new service.
      tags:
      - Services
      x-contentType: application/json
      x-accepts: application/json
    put:
      description: Updates service record in the database with new information, if
        such record exists already, if not then error, returns with a key property
        if user is admin.
      operationId: servicesUpdateById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceDto'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceDto'
          description: Service updated successfully, return the updated service object.
        "401":
          description: Missing or expired session.
        "403":
          description: Missing required privileges.
        "404":
          description: Such service does not exist. Could not update an unexisting
            service.
      summary: Update service information.
      tags:
      - Services
      x-contentType: application/json
      x-accepts: application/json
  /services/{id}:
    delete:
      description: Removes a service by it's ID if it exists.
      operationId: servicesDeleteById
      parameters:
      - description: The unique identifier of service to search for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          description: Service deleted successfully.
        "401":
          description: Missing or expired session.
        "403":
          description: Missing required privileges.
        "404":
          description: Such service does not exist. Could not delete an unexisting
            service.
      summary: Delete service by ID.
      tags:
      - Services
      x-accepts: application/json
    get:
      description: Returns a service information by it's ID if this service exists,
        returns key property if user is admin.
      operationId: servicesGetById
      parameters:
      - description: The unique identifier of service to search for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceDto'
          description: Successfull request, return the service object.
        "401":
          description: Missing or expired session.
        "403":
          description: Missing required privileges.
        "404":
          description: Such service does not exist.
      summary: Get service by ID.
      tags:
      - Services
      x-accepts: application/json
  /users:
    get:
      description: Returns a full list of users available in the system. If user that
        makes request has enough permissions.
      operationId: usersGetAll
      parameters:
      - description: The key of the service
        explode: true
        in: query
        name: service
        required: true
        schema:
          type: string
        style: form
      - description: Page of users, 10 users per page.
        explode: true
        in: query
        name: page
        required: true
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserDto'
                type: array
          description: Successfully returns a list of users.
        "401":
          description: Missing or expired session.
        "403":
          description: Missing required privileges.
      summary: Gett all users in the system for admins only. If you are a super adming
        then you can get all users for current service.
      tags:
      - Users
      x-accepts: application/json
    post:
      description: Creates a new user if can and if the creator token has a valid
        admin role on the service.
      operationId: usersCreate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
          description: Successfully created a new user account.
        "401":
          description: Missing or expired session.
        "403":
          description: Missing required privileges.
      summary: Create new user.
      tags:
      - Users
      x-contentType: application/json
      x-accepts: application/json
    put:
      description: Update user by user ID. If user has enough permissions then user
        is updated successfully.
      operationId: usersUpdate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
          description: Returns updated user information object.
        "401":
          description: Missing or expired session.
        "403":
          description: Missing required privileges.
        "404":
          description: Such service does not exist. Could not update an unexisting
            user.
      summary: Update user information by user ID.
      tags:
      - Users
      x-contentType: application/json
      x-accepts: application/json
  /users/{id}:
    delete:
      description: Delete user by user ID. Throws error message if user does not have
        enough permissions.
      operationId: usersDelete
      parameters:
      - description: The unique identifier of user to search for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          description: User record has been deleted successfully.
        "401":
          description: Missing or expired session.
        "403":
          description: Missing required privileges.
        "404":
          description: Such service does not exist. Could not delete an unexisting
            user.
      summary: Delete user record by user ID.
      tags:
      - Users
      x-accepts: application/json
    get:
      description: Get user by user ID. If user has enough permissions then object
        is returned successfully.
      operationId: usersGetById
      parameters:
      - description: The unique identifier of user to search for.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
          description: Returns user information object.
        "401":
          description: Missing or expired session.
        "403":
          description: Missing required privileges.
        "404":
          description: Such service does not exist. Could not get an unexisting user.
      summary: Get user information by user ID.
      tags:
      - Users
      x-accepts: application/json
  /users/{userId}/permission/{serviceId}:
    post:
      description: Creates a new user service role that permits user to access specific
        service depending on their role priveledges.
      operationId: usersCreatePermission
      parameters:
      - description: The unique identifier of user to search for.
        explode: false
        in: path
        name: userId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      - description: The unique identifier of service to search for.
        explode: false
        in: path
        name: serviceId
        required: true
        schema:
          format: int64
          type: integer
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/inline_object'
        content:
          application/json:
            schema:
              properties:
                userId:
                  format: int64
                  type: integer
                serviceId:
                  format: int64
                  type: integer
                role:
                  $ref: '#/components/schemas/UserRoleDto'
              type: object
      responses:
        "200":
          description: Successfully created user permision for the service.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralErrorDto'
          description: Missing or expired session.
        "403":
          description: Missing required privileges.
        "404":
          description: User or Service are not found.
      summary: Create new permission and assign a role to user for specific service.
      tags:
      - Users
      x-contentType: application/json
      x-accepts: application/json
  /auth/current:
    get:
      description: Get current authenticated user information. Returns user information
        with user roles for this service.
      operationId: getCurrentUser
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
          description: User found and available
      summary: Get authenticated user info.
      tags:
      - Authentication
      x-accepts: application/json
  /auth/login:
    post:
      description: Try to authenticate user with username, password and unique identifier
        generated based on their machine.
      operationId: authenticate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAuthenticationDto'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSessionTokenDto'
          description: User identified successfully.
        "401":
          description: Unauthorized. User credentials are incorrect.
      summary: Authenticate user.
      tags:
      - Authentication
      x-contentType: application/json
      x-accepts: application/json
  /auth/validate:
    post:
      description: Calls to validate user token and service key for a valid session.
      operationId: validate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSessionTokenDto'
      responses:
        "200":
          description: User identified successfully.
        "401":
          description: Unauthorized. User session is incorrect.
      summary: Validate user authentication.
      tags:
      - Authentication
      x-contentType: application/json
      x-accepts: application/json
components:
  requestBodies:
    inline_object:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/inline_object'
  schemas:
    UserAuthenticationDto:
      description: Body authentication request used to call the authenticate endpoint
        to log in user and create session.
      example:
        password: password
        hardwareId: hardwareId
        key: key
        username: username
      properties:
        username:
          description: The user identifier as a unique username.
          type: string
        password:
          description: User's password hashed with SHA256.
          type: string
        hardwareId:
          description: A unique user identifier for this specific machine.
          type: string
        key:
          description: Service key identifier.
          type: string
      type: object
    UserSessionTokenDto:
      description: Represents a unique session token specific to this user, this service
        and a unique session uuid.
      example:
        token: token
      properties:
        token:
          description: User's unique session token.
          type: string
      required:
      - service
      - token
      type: object
    GeneralErrorDto:
      description: Object that is returned in case of any error happening on the server
        side. The code is HTTP code.
      properties:
        code:
          description: The HTTP response code.
          format: int32
          type: integer
        message:
          description: Message describing the error.
          type: string
      required:
      - code
      - message
      type: object
    UserRoleDto:
      description: Roles enum assignable to users for specific services.
      enum:
      - USER
      - MODER
      - ADMIN
      type: string
    UserDto:
      description: Defines user object, user can have diffirent permissions for diffirent
        roles. If user does not have a role then they do not have access to that service.
      example:
        firstName: firstName
        lastName: lastName
        createdAt: 2000-01-23T04:56:07.000+00:00
        password: password
        serviceRoles:
        - service:
            createdAt: 2000-01-23T04:56:07.000+00:00
            name: name
            description: description
            id: 0
            key: key
            updatedAt: 2000-01-23T04:56:07.000+00:00
        - service:
            createdAt: 2000-01-23T04:56:07.000+00:00
            name: name
            description: description
            id: 0
            key: key
            updatedAt: 2000-01-23T04:56:07.000+00:00
        id: 0
        email: email
        username: username
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          description: User's unique identifier.
          format: int64
          type: integer
        firstName:
          description: First name.
          type: string
        lastName:
          description: Last name.
          type: string
        username:
          description: The internal shorted nickname of the user.
          type: string
        password:
          description: Encrypted users pasword hash.
          type: string
        email:
          description: Email.
          type: string
        serviceRoles:
          description: User roles for services.
          items:
            $ref: '#/components/schemas/ServiceRoleDto'
          type: array
        createdAt:
          description: The date and time this user was created at.
          format: date-time
          type: string
        updatedAt:
          description: The date and time when this record has been updated.
          format: date-time
          type: string
      required:
      - firstName
      - lastName
      - username
      type: object
    ServiceDto:
      description: Object representing each Service registered in the system. Each
        service can have unique users and unique user logins.
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        name: name
        description: description
        id: 0
        key: key
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          description: Unique identifier.
          format: int64
          type: integer
        name:
          description: The short name of this service to display on UI.
          type: string
        description:
          description: String describing this service and it's purpose.
          type: string
        key:
          description: String key of SHA256, that is unique for each service. It is
            used to identify the service authentication request alongside user token.
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - description
      - key
      - name
      type: object
    ServiceRoleDto:
      description: Describes an object with service key and a list of roles for this
        service for a specific user.
      example:
        service:
          createdAt: 2000-01-23T04:56:07.000+00:00
          name: name
          description: description
          id: 0
          key: key
          updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        service:
          $ref: '#/components/schemas/ServiceDto'
        role:
          $ref: '#/components/schemas/UserRoleDto'
      required:
      - roles
      - serviceKey
      - userId
      type: object
    SessionDto:
      description: Describes a unique user logged session object. This is unique to
        user, service, hardwareId.
      properties:
        id:
          description: Unique identifier.
          format: int64
          type: integer
        user:
          $ref: '#/components/schemas/UserDto'
        service:
          $ref: '#/components/schemas/ServiceDto'
        hardwareId:
          description: Unique hardware identifier.
          type: string
        token:
          description: Generated token.
          type: string
        createdAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - hardwareId
      - service
      - user
      type: object
    UserServiceInvitationDto:
      description: Object being sent to API endpoint to send an email with an invitation
        link to invite a specific user.
      example:
        serviceKey: serviceKey
        username: username
      properties:
        username:
          description: Name of the user.
          type: string
        serviceKey:
          description: Key identifier of the service.
          type: string
        desiredRole:
          $ref: '#/components/schemas/UserRoleDto'
      required:
      - serviceKey
      - username
      type: object
    UserServiceInvitationLinkDto:
      description: Object containing generated link.
      example:
        link: link
      properties:
        link:
          description: Link to url.
          type: string
      required:
      - link
      type: object
    inline_object:
      properties:
        userId:
          format: int64
          type: integer
        serviceId:
          format: int64
          type: integer
        role:
          $ref: '#/components/schemas/UserRoleDto'
      type: object
  securitySchemes:
    JWTAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http

