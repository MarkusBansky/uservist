/*
 * Uservist Service API
 * Defines the API enpoints and objects for authentication service. Describes the REST service architecture and models.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: admin@markiian-benovskyi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.markiian.benovskyi.uservist.api.uservist_sdk.api;

import com.markiian.benovskyi.uservist.api.uservist_sdk.model.GeneralErrorDto;
import com.markiian.benovskyi.uservist.api.uservist_sdk.model.InlineObject;
import com.markiian.benovskyi.uservist.api.uservist_sdk.model.UserDto;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Ignore
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    
    /**
     * Create new user.
     *
     * Creates a new user if can and if the creator token has a valid admin role on the service.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersCreateTest() {
        UserDto userDto = null;
        UserDto response = api.usersCreate(userDto);

        // TODO: test validations
    }
    
    /**
     * Create new permission and assign a role to user for specific service.
     *
     * Creates a new user service role that permits user to access specific service depending on their role priveledges.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersCreatePermissionTest() {
        Long userId = null;
        Long serviceId = null;
        InlineObject inlineObject = null;
        api.usersCreatePermission(userId, serviceId, inlineObject);

        // TODO: test validations
    }
    
    /**
     * Delete user record by user ID.
     *
     * Delete user by user ID. Throws error message if user does not have enough permissions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersDeleteTest() {
        Long id = null;
        api.usersDelete(id);

        // TODO: test validations
    }
    
    /**
     * Gett all users in the system for admins only. If you are a super adming then you can get all users for current service.
     *
     * Returns a full list of users available in the system. If user that makes request has enough permissions.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersGetAllTest() {
        String service = null;
        Integer page = null;
        List<UserDto> response = api.usersGetAll(service, page);

        // TODO: test validations
    }
    
    /**
     * Get user information by user ID.
     *
     * Get user by user ID. If user has enough permissions then object is returned successfully.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersGetByIdTest() {
        Long id = null;
        UserDto response = api.usersGetById(id);

        // TODO: test validations
    }
    
    /**
     * Update user information by user ID.
     *
     * Update user by user ID. If user has enough permissions then user is updated successfully.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersUpdateTest() {
        UserDto userDto = null;
        UserDto response = api.usersUpdate(userDto);

        // TODO: test validations
    }
    
}
