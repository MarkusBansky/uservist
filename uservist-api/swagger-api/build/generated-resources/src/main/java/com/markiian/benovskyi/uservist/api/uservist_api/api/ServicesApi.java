/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.markiian.benovskyi.uservist.api.uservist_api.api;

import com.markiian.benovskyi.uservist.api.uservist_api.model.ServiceDto;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-07-16T13:34:50.527602+01:00[Europe/London]")

@Validated
@Api(value = "services", description = "the services API")
public interface ServicesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /services : Create new service.
     * Creates a new service record in the database. If user does not have a permission to create a record, then trow an error.
     *
     * @param serviceDto  (optional)
     * @return Successfully created new service record. (status code 200)
     *         or Missing or expired session. (status code 401)
     *         or Missing required privileges. (status code 403)
     */
    @ApiOperation(value = "Create new service.", nickname = "servicesCreate", notes = "Creates a new service record in the database. If user does not have a permission to create a record, then trow an error.", response = ServiceDto.class, tags={ "Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully created new service record.", response = ServiceDto.class),
        @ApiResponse(code = 401, message = "Missing or expired session."),
        @ApiResponse(code = 403, message = "Missing required privileges.") })
    @RequestMapping(value = "/services",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ServiceDto> servicesCreate(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) ServiceDto serviceDto) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0, \"key\" : \"key\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /services/{id} : Delete service by ID.
     * Removes a service by it&#39;s ID if it exists.
     *
     * @param id The unique identifier of service to search for. (required)
     * @return Service deleted successfully. (status code 200)
     *         or Missing or expired session. (status code 401)
     *         or Missing required privileges. (status code 403)
     *         or Such service does not exist. Could not delete an unexisting service. (status code 404)
     */
    @ApiOperation(value = "Delete service by ID.", nickname = "servicesDeleteById", notes = "Removes a service by it's ID if it exists.", tags={ "Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Service deleted successfully."),
        @ApiResponse(code = 401, message = "Missing or expired session."),
        @ApiResponse(code = 403, message = "Missing required privileges."),
        @ApiResponse(code = 404, message = "Such service does not exist. Could not delete an unexisting service.") })
    @RequestMapping(value = "/services/{id}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> servicesDeleteById(@ApiParam(value = "The unique identifier of service to search for.",required=true) @PathVariable("id") Long id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /services : Get all services.
     * Returns all available services in the system. Only returns the keys fields if user is authenticated via token.
     *
     * @param page Page of users, 10 users per page. (required)
     * @return Successfull request, returning all available services in the system. (status code 200)
     *         or Missing or expired session. (status code 401)
     *         or Missing required privileges. (status code 403)
     */
    @ApiOperation(value = "Get all services.", nickname = "servicesGetAll", notes = "Returns all available services in the system. Only returns the keys fields if user is authenticated via token.", response = ServiceDto.class, responseContainer = "List", tags={ "Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfull request, returning all available services in the system.", response = ServiceDto.class, responseContainer = "List"),
        @ApiResponse(code = 401, message = "Missing or expired session."),
        @ApiResponse(code = 403, message = "Missing required privileges.") })
    @RequestMapping(value = "/services",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<ServiceDto>> servicesGetAll(@NotNull @ApiParam(value = "Page of users, 10 users per page.", required = true) @Valid @RequestParam(value = "page", required = true) Integer page) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0, \"key\" : \"key\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /services/{id} : Get service by ID.
     * Returns a service information by it&#39;s ID if this service exists, returns key property if user is admin.
     *
     * @param id The unique identifier of service to search for. (required)
     * @return Successfull request, return the service object. (status code 200)
     *         or Missing or expired session. (status code 401)
     *         or Missing required privileges. (status code 403)
     *         or Such service does not exist. (status code 404)
     */
    @ApiOperation(value = "Get service by ID.", nickname = "servicesGetById", notes = "Returns a service information by it's ID if this service exists, returns key property if user is admin.", response = ServiceDto.class, tags={ "Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfull request, return the service object.", response = ServiceDto.class),
        @ApiResponse(code = 401, message = "Missing or expired session."),
        @ApiResponse(code = 403, message = "Missing required privileges."),
        @ApiResponse(code = 404, message = "Such service does not exist.") })
    @RequestMapping(value = "/services/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ServiceDto> servicesGetById(@ApiParam(value = "The unique identifier of service to search for.",required=true) @PathVariable("id") Long id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0, \"key\" : \"key\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /services : Update service information.
     * Updates service record in the database with new information, if such record exists already, if not then error, returns with a key property if user is admin.
     *
     * @param serviceDto  (optional)
     * @return Service updated successfully, return the updated service object. (status code 200)
     *         or Missing or expired session. (status code 401)
     *         or Missing required privileges. (status code 403)
     *         or Such service does not exist. Could not update an unexisting service. (status code 404)
     */
    @ApiOperation(value = "Update service information.", nickname = "servicesUpdateById", notes = "Updates service record in the database with new information, if such record exists already, if not then error, returns with a key property if user is admin.", response = ServiceDto.class, tags={ "Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Service updated successfully, return the updated service object.", response = ServiceDto.class),
        @ApiResponse(code = 401, message = "Missing or expired session."),
        @ApiResponse(code = 403, message = "Missing required privileges."),
        @ApiResponse(code = 404, message = "Such service does not exist. Could not update an unexisting service.") })
    @RequestMapping(value = "/services",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<ServiceDto> servicesUpdateById(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) ServiceDto serviceDto) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0, \"key\" : \"key\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
