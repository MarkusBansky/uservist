/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.markiian.benovskyi.uservist.api.uservist_api.api;

import com.markiian.benovskyi.uservist.api.uservist_api.model.UserAuthenticationDto;
import com.markiian.benovskyi.uservist.api.uservist_api.model.UserDto;
import com.markiian.benovskyi.uservist.api.uservist_api.model.UserSessionTokenDto;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-07-09T13:06:45.607674+01:00[Europe/London]")

@Validated
@Api(value = "auth", description = "the auth API")
public interface AuthApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /auth/login : Authenticate user.
     * Try to authenticate user with username, password and unique identifier generated based on their machine.
     *
     * @param userAuthenticationDto  (optional)
     * @return User identified successfully. (status code 200)
     *         or Unauthorized. User credentials are incorrect. (status code 401)
     */
    @ApiOperation(value = "Authenticate user.", nickname = "authenticate", notes = "Try to authenticate user with username, password and unique identifier generated based on their machine.", response = UserSessionTokenDto.class, tags={ "Authentication", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "User identified successfully.", response = UserSessionTokenDto.class),
        @ApiResponse(code = 401, message = "Unauthorized. User credentials are incorrect.") })
    @RequestMapping(value = "/auth/login",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<UserSessionTokenDto> authenticate(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) UserAuthenticationDto userAuthenticationDto) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"token\" : \"token\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /auth/current : Get authenticated user info.
     * Get current authenticated user information. Returns user information with user roles for this service.
     *
     * @return User found and available (status code 200)
     */
    @ApiOperation(value = "Get authenticated user info.", nickname = "getCurrentUser", notes = "Get current authenticated user information. Returns user information with user roles for this service.", response = UserDto.class, tags={ "Authentication", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "User found and available", response = UserDto.class) })
    @RequestMapping(value = "/auth/current",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<UserDto> getCurrentUser() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"password\" : \"password\", \"serviceRoles\" : [ { \"service\" : { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0, \"key\" : \"key\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } }, { \"service\" : { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"description\" : \"description\", \"id\" : 0, \"key\" : \"key\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } } ], \"id\" : 0, \"email\" : \"email\", \"username\" : \"username\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /auth/validate : Validate user authentication.
     * Calls to validate user token and service key for a valid session.
     *
     * @param userSessionTokenDto  (optional)
     * @return User identified successfully. (status code 200)
     *         or Unauthorized. User session is incorrect. (status code 401)
     */
    @ApiOperation(value = "Validate user authentication.", nickname = "validate", notes = "Calls to validate user token and service key for a valid session.", tags={ "Authentication", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "User identified successfully."),
        @ApiResponse(code = 401, message = "Unauthorized. User session is incorrect.") })
    @RequestMapping(value = "/auth/validate",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> validate(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) UserSessionTokenDto userSessionTokenDto) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
