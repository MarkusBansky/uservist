/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.markiian.benovskyi.uservist.api.uservist_api.api;

import com.markiian.benovskyi.uservist.api.uservist_api.model.UserServiceInvitationDto;
import com.markiian.benovskyi.uservist.api.uservist_api.model.UserServiceInvitationLinkDto;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-07-16T13:34:50.527602+01:00[Europe/London]")

@Validated
@Api(value = "invitations", description = "the invitations API")
public interface InvitationsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /invitations : Accept invitation.
     * User accepts the invitation and acquires role and connection for the specific service.
     *
     * @param token Invitation token. (required)
     * @return Successfully aquired service role. (status code 200)
     *         or Missing or expired session. (status code 401)
     *         or Missing required privileges. (status code 403)
     */
    @ApiOperation(value = "Accept invitation.", nickname = "acceptInvitation", notes = "User accepts the invitation and acquires role and connection for the specific service.", tags={ "Invitations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully aquired service role."),
        @ApiResponse(code = 401, message = "Missing or expired session."),
        @ApiResponse(code = 403, message = "Missing required privileges.") })
    @RequestMapping(value = "/invitations",
        method = RequestMethod.GET)
    default ResponseEntity<Void> acceptInvitation(@NotNull @ApiParam(value = "Invitation token.", required = true) @Valid @RequestParam(value = "token", required = true) String token) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /invitations : Create invitation.
     * Create an invitation for some user to be added to the service, user would receive a specific role when they approve the invitation. Invitation is sent by email.
     *
     * @param userServiceInvitationDto  (optional)
     * @return Successfull invitation sent. (status code 200)
     *         or Missing or expired session. (status code 401)
     *         or Missing required privileges. (status code 403)
     */
    @ApiOperation(value = "Create invitation.", nickname = "createInvitation", notes = "Create an invitation for some user to be added to the service, user would receive a specific role when they approve the invitation. Invitation is sent by email.", response = UserServiceInvitationLinkDto.class, tags={ "Invitations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfull invitation sent.", response = UserServiceInvitationLinkDto.class),
        @ApiResponse(code = 401, message = "Missing or expired session."),
        @ApiResponse(code = 403, message = "Missing required privileges.") })
    @RequestMapping(value = "/invitations",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<UserServiceInvitationLinkDto> createInvitation(@ApiParam(value = ""  )  @Valid @RequestBody(required = false) UserServiceInvitationDto userServiceInvitationDto) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"link\" : \"link\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
