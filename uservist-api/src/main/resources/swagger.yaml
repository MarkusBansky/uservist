openapi: "3.0.0"

info:
  title: Uservist Service API
  description:
    Defines the API enpoints and objects for authentication service.
    Describes the REST service architecture and models.
  contact:
    name: Markiian Benovskyi
    url: https://www.markiian-benovskyi.com
    email: admin@markiian-benovskyi.com
  version: 0.0.1

servers:
  - url: http://localhost:9090/api/
    description: Local server for authentication service.

tags:
  - name: Services
    description:
      Service represents a single connected SaaS that uses this authentication to autorize users,
      it has a unique key and uses user token for authentication.
  - name: Users
    description:
      Each user can have access to specific services with a specific role,
      then it can authenticate and receive a token.
  - name: Authentication
    description:
      Authenticate user with username and password, and the unique identifier of the system.
      Or validate user token and return user information for that specific service.
  - name: Invitations
    description: Invitation controller to handle joiining service invitations.
  - name: Events
    description: Logs of events for specific session or user.

components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT


  schemas:
    UserAuthenticationDto:
      description: Body authentication request used to call the authenticate endpoint to log in user and create session.
      type: object
      properties:
        username:
          type: string
          description: The user identifier as a unique username.
        password:
          type: string
          description: User's password hashed with SHA256.
        browser:
          type: string
          description: A unique user identifier for this specific machine.
        ipAddress:
          type: string
          description: IP address from requested machine.
        service:
          type: string
          description: Service key identifier.

    UserSessionTokenDto:
      description: Represents a unique session token specific to this user, this service and a unique session uuid.
      type: object
      required:
        - token
        - service
      properties:
        token:
          type: string
          description: User's unique session token.

    UserRoleDto:
      description: Roles enum assignable to users for specific services.
      type: string
      enum: [REVOKED, USER, MODER, ADMIN]


    UsersPageDto:
      description: Page with users.
      type: object
      properties:
        currentPage:
          type: integer
        numberOfPages:
          type: integer
          format: int64
        numberOfItems:
          type: integer
          format: int64
        itemsPerPage:
          type: integer
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'

    UserDto:
      description:
        Defines user object, user can have diffirent permissions for diffirent roles.
        If user does not have a role then they do not have access to that service.
      type: object
      properties:
        id:
          description: User's unique identifier.
          type: integer
          format: int64
        firstName:
          description: First name.
          type: string
        lastName:
          description: Last name.
          type: string
        username:
          description: The internal shorted nickname of the user.
          type: string
        email:
          description: Email.
          type: string
        createdAt:
          description: The date and time this user was created at.
          type: string
          format: date-time
        updatedAt:
          description: The date and time when this record has been updated.
          type: string
          format: date-time

    UserUpdateDto:
      description: DTO used to update user information.
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string

    UserCreateDto:
      description: DTO used to create new user.
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        email:
          type: string
        password:
          type: string
        serviceKey:
          type: string

    ServicesPageDto:
      description: Represents a page of services.
      type: object
      properties:
        currentPage:
          type: integer
        numberOfPages:
          type: integer
          format: int64
        numberOfItems:
          type: integer
          format: int64
        itemsPerPage:
          type: integer
        services:
          type: array
          items:
            $ref: '#/components/schemas/ServiceDto'

    ServiceDto:
      description:
        Object representing each Service registered in the system.
        Each service can have unique users and unique user logins.
      type: object
      properties:
        id:
          description: Unique identifier.
          type: integer
          format: int64
        name:
          description: The short name of this service to display on UI.
          type: string
        description:
          description: String describing this service and it's purpose.
          type: string
        key:
          description:
            String key of SHA256, that is unique for each service.
            It is used to identify the service authentication request alongside user token.
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ServiceUpdateDto:
      description: DTO used to update service information.
      type: object
      properties:
        name:
          type: string
        description:
          type: string

    ServiceCreateDto:
      description: DTO to create new service.
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        key:
          type: string

    ServiceRoleDto:
      description:
        Describes an object with service key and a list of roles for this service for a specific user.
      type: object
      properties:
        service:
          $ref: '#/components/schemas/ServiceDto'
        role:
          $ref: '#/components/schemas/UserRoleDto'

    SessionDto:
      description:
        Describes a unique user logged session object. This is unique to user, service, hardwareId.
      type: object
      properties:
        id:
          description: Unique identifier.
          type: integer
          format: int64
        user:
          $ref: '#/components/schemas/UserDto'
        service:
          $ref: '#/components/schemas/ServiceDto'
        browser:
          type: string
          description: Broser.
        ipAddress:
          type: string
          description: Address of users machine.
        createdAt:
          type: string
          format: date-time

    UserServiceInvitationCreateDto:
      description:
        Object being sent to API endpoint to send an email with an invitation link to invite a specific user.
      type: object
      required:
        - userId
        - serviceKey
      properties:
        userId:
          description: ID of the user.
          type: integer
          format: int64
        serviceKey:
          description: Key identifier of the service.
          type: string
        desiredRole:
          $ref: '#/components/schemas/UserRoleDto'

paths:

  /invitations:
    get:
      summary: Accept invitation.
      operationId: acceptInvitation
      tags:
        - Invitations
      description:
        User accepts the invitation and acquires role and connection for the specific service.
      parameters:
        - in: query
          name: token
          description: Invitation token.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successfully aquired service role.
        401:
          description: Missing or expired session.
        403:
          description: Missing required privileges.

    post:
      summary: Create invitation.
      operationId: createInvitation
      tags:
        - Invitations
      description:
        Create an invitation for some user to be added to the service, user would receive a specific role when they
        approve the invitation. Invitation is sent by email.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserServiceInvitationCreateDto'
      responses:
        200:
          description: Successfull invitation sent.
        401:
          description: Missing or expired session.
        403:
          description: Missing required privileges.


  /services:
    get:
      summary: Get all services.
      operationId: servicesGetAll
      tags:
        - Services
      description:
        Returns all available services in the system.
        Only returns the keys fields if user is authenticated via token.
      parameters:
        - in: query
          name: page
          description: Page of users, 10 users per page.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfull request, returning all available services in the system.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicesPageDto'
        401:
          description: Missing or expired session.
        403:
          description: Missing required privileges.

    post:
      summary: Create new service.
      operationId: servicesCreate
      tags:
        - Services
      description:
        Creates a new service record in the database. If user does not have a permission
        to create a record, then trow an error.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceCreateDto'
      responses:
        200:
          description: Successfully created new service record.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceDto'
        401:
          description: Missing or expired session.
        403:
          description: Missing required privileges.

  /services/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: The unique identifier of service to search for.
        schema:
          type: integer
          format: int64
    get:
      summary: Get service by ID.
      operationId: servicesGetById
      tags:
        - Services
      description:
        Returns a service information by it's ID if this service exists,
        returns key property if user is admin.
      responses:
        200:
          description: Successfull request, return the service object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceDto'
        401:
          description: Missing or expired session.
        403:
          description: Missing required privileges.
        404:
          description: Such service does not exist.

    put:
      summary: Update service by ID.
      operationId: servicesUpdateById
      tags:
        - Services
      description:
        Updates service record in the database with new information, if such record exists already, if not then error,
        returns with a key property if user is admin.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceUpdateDto'
      responses:
        200:
          description: Service updated successfully, return the updated service object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceDto'
        401:
          description: Missing or expired session.
        403:
          description: Missing required privileges.
        404:
          description: Such service does not exist. Could not update an unexisting service.

    delete:
      summary: Delete service by ID.
      operationId: servicesDeleteById
      tags:
        - Services
      description: Removes a service by it's ID if it exists.
      responses:
        200:
          description: Service deleted successfully.
        401:
          description: Missing or expired session.
        403:
          description: Missing required privileges.
        404:
          description: Such service does not exist. Could not delete an unexisting service.

  /users:
    get:
      summary: Gett all users in the system for admins only. If you are a super adming then you can get all users for current service.
      operationId: usersGetAll
      tags:
        - Users
      description:
        Returns a full list of users available in the system.
        If user that makes request has enough permissions.
      parameters:
        - in: query
          name: service
          description: The key of the service
          required: true
          schema:
            type: string
        - in: query
          name: page
          description: Page of users, 10 users per page.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successfully returns a list of users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersPageDto'
        401:
          description: Missing or expired session.
        403:
          description: Missing required privileges.

    post:
      summary: Create new user.
      operationId: usersCreate
      tags:
        - Users
      description: Creates a new user if can and if the creator token has a valid admin role on the service.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateDto'
      responses:
        200:
          description: Successfully created a new user account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        401:
          description: Missing or expired session.
        403:
          description: Missing required privileges.

  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: The unique identifier of user to search for.
        schema:
          type: integer
          format: int64

    get:
      summary: Get user information by user ID.
      operationId: usersGetById
      tags:
        - Users
      description: Get user by user ID. If user has enough permissions then object is returned successfully.
      responses:
        200:
          description: Returns user information object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        401:
          description: Missing or expired session.
        403:
          description: Missing required privileges.
        404:
          description: Such service does not exist. Could not get an unexisting user.

    put:
      summary: Update user information by user ID.
      operationId: usersUpdate
      tags:
        - Users
      description: Update user by user ID. If user has enough permissions then user is updated successfully.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateDto'
      responses:
        200:
          description: Returns updated user information object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        401:
          description: Missing or expired session.
        403:
          description: Missing required privileges.
        404:
          description: Such service does not exist. Could not update an unexisting user.

    delete:
      summary: Delete user record by user ID.
      operationId: usersDelete
      tags:
        - Users
      description: Delete user by user ID. Throws error message if user does not have enough permissions.
      responses:
        200:
          description: User record has been deleted successfully.
        401:
          description: Missing or expired session.
        403:
          description: Missing required privileges.
        404:
          description: Such service does not exist. Could not delete an unexisting user.

  /users/{userId}/permission/{serviceId}:
    parameters:
      - name: userId
        in: path
        required: true
        description: The unique identifier of user to search for.
        schema:
          type: integer
          format: int64
      - name: serviceId
        in: path
        required: true
        description: The unique identifier of service to search for.
        schema:
          type: integer
          format: int64

    post:
      summary: Create new permission and assign a role to user for specific service.
      operationId: usersCreatePermission
      tags:
        - Users
      description:
        Creates a new user service role that permits user to access specific
        service depending on their role priveledges.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  $ref: '#/components/schemas/UserRoleDto'
      responses:
        200:
          description: Successfully created user permision for the service.
        401:
          description: Missing or expired session.
        403:
          description: Missing required privileges.
        404:
          description: User or Service are not found.

  /auth/current:
    get:
      summary: Get authenticated user info.
      operationId: getCurrentUser
      tags:
        - Authentication
      description:
        Get current authenticated user information. Returns user information with user roles for this service.
      responses:
        200:
          description: User found and available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'

  /auth/login:
    post:
      summary: Authenticate user.
      operationId: authenticate
      tags:
        - Authentication
      description:
        Try to authenticate user with username, password and unique identifier generated based on their machine.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserAuthenticationDto'
      responses:
        200:
          description: User identified successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSessionTokenDto'
        401:
          description: Unauthorized. User credentials are incorrect.

  /auth/validate:
    post:
      summary: Validate user authentication.
      operationId: validate
      tags:
        - Authentication
      description: Calls to validate user token and service key for a valid session.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSessionTokenDto'
      responses:
        200:
          description: User identified successfully.
        401:
          description: Unauthorized. User session is incorrect.
