plugins {
    id 'java'
    id 'jacoco'
    id 'application'
    id 'org.liquibase.gradle' version '2.0.4'
    id 'io.spring.dependency-management' version '1.0.7.RELEASE'
    id 'org.springframework.boot' version '2.2.4.RELEASE'
}

sourceCompatibility = JavaVersion.VERSION_14

group 'com.markiian.benovskyi'
version '0.0.1'

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
    maven { url 'https://jitpack.io' }
}

dependencies {
    // Logs
    implementation      'org.slf4j:slf4j-log4j12:2.0.0-alpha1'
    implementation      'net.logstash.logback:logstash-logback-encoder:6.3'

    // Postgres Database
    implementation         'org.postgresql:postgresql'

    // Migrations
    liquibaseRuntime    'org.liquibase:liquibase-core:4.0.0'
    liquibaseRuntime    'org.liquibase:liquibase-groovy-dsl:3.0.0'
    liquibaseRuntime    'javax.xml.bind:jaxb-api:2.3.1'
    liquibaseRuntime    'ch.qos.logback:logback-core:1.2.3'
    liquibaseRuntime    'ch.qos.logback:logback-classic:1.2.3'
    liquibaseRuntime    'org.postgresql:postgresql'

    // Spring Boot Starter
    implementation      'org.springframework.boot:spring-boot-starter-web'
    implementation      'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation      'org.springframework.boot:spring-boot-starter-actuator:2.1.7.RELEASE'
    implementation      'org.springframework.boot:spring-boot-starter-security'

    // RSS and WEBPage reader
    implementation      'javax.xml.bind:jaxb-api:2.3.0'
    implementation      'javax.activation:activation:1.1'
    implementation      'org.glassfish.jaxb:jaxb-runtime:2.3.0'
    implementation      'org.jsoup:jsoup:1.13.1'
    implementation      'com.github.chimbori:crux:2.2.0'

    // Testing
    testImplementation      'org.projectlombok:lombok:1.18.12'
    testImplementation      'org.junit.jupiter:junit-jupiter:5.4.2'
    testImplementation      'org.mockito:mockito-core:3.+'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
    testImplementation(     'org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    // The auth api
    implementation      'com.markiian.benovskyi.uservist:uservist-api:0.1'

    // Security / JWT
    implementation      'com.google.guava:guava:28.2-jre'
    implementation      'io.jsonwebtoken:jjwt-api:0.10.7'
    implementation      'io.jsonwebtoken:jjwt-impl:0.10.7'
    implementation      'io.jsonwebtoken:jjwt-jackson:0.10.7'
    implementation      'org.passay:passay:1.6.0'

    // Email
    implementation      'it.ozimov:spring-boot-email-core:0.6.3'

    // Lombok
    implementation      'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
}

repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'https://repo.spring.io/milestone' }
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/coverage/html")
    }
}

jacoco {
    toolVersion = "0.8.6"
    reportsDir = file("$buildDir/coverage")
}

liquibase {
    //noinspection GrUnresolvedAccess
    activities {
        main {}
    }
}

task migration {
    if (System.getenv('MIGRATIONS_CONFIG') != null) {
        print "Loading migration config: "
        migrationsConfig = System.getenv('MIGRATIONS_CONFIG')
        println migrationsConfig
    }

    // This task loads the development properties file
    def props = new Properties()
    file(migrationsConfig).withInputStream { props.load(it) }

    doLast {
        println "Applying local postgres DB migrations setup"
        print "Changelog File "
        println props.getProperty("lb.changelogFile")
        print "Database URL "
        println props.getProperty("lb.dbUrl")
        print "Username "
        println props.getProperty("lb.username")
        print "Scheme "
        println props.getProperty("lb.scheme")
        print "LB Scheme "
        println props.getProperty("lb.lbScheme")

        liquibase {
            //noinspection GrUnresolvedAccess
            activities {
                //noinspection GroovyAssignabilityCheck
                main {
                    changeLogFile props.getProperty("lb.changelogFile")
                    url props.getProperty("lb.dbUrl")
                    username props.getProperty("lb.username")
                    password props.getProperty("lb.password")
                    defaultSchemaName props.getProperty("lb.scheme")
                    liquibaseSchemaName props.getProperty("lb.lbScheme")
                }
            }
        }
    }
}

// Define the main class for the application
application {
    mainClassName = 'com.markiian.benovskyi.auth.UvApplication'
}

bootJar {
    mainClassName = 'com.markiian.benovskyi.auth.UvApplication'
}